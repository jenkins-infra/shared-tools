# Disable CGO to avoid error "cgo: exec /missing-cc: fork/exec /missing-cc: no such file or directory"
# Ref. https://golang.org/cmd/cgo/
export CGO_ENABLED=0

TERRAFORM_PROJECT_DIR ?= $(PWD)
export TERRAFORM_PROJECT_DIR # Required
BACKEND_CONFIG_FILE ?= $(TERRAFORM_PROJECT_DIR)/backend-config
PLAN_FILE_NAME ?= terraform-plan-output.txt

help: ## Show this Makefile's help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

prepare: ## Prepare Terraform's environment by downloading and initializing its plugins and backends
	make --directory=$(TERRAFORM_PROJECT_DIR) .terraform/plugins/selections.json

validate: lint $(TERRAFORM_PROJECT_DIR)/.terraform/plugins/selections.json ## Validate the terraform files of the current project. Might executes "make prepare" if required.
	@cd $(TERRAFORM_PROJECT_DIR) && terraform validate
	@cd $(TERRAFORM_PROJECT_DIR) && tfsec --exclude-downloaded-modules

lint: ## Lint the project files
	@cd $(TERRAFORM_PROJECT_DIR) && terraform fmt -recursive -check || echo "Error: please run the command 'terraform fmt -recursive' to format the file(s) above."

# tests: .terraform/plugins/selections.json ## Execute the test harness
common-tests: $(TERRAFORM_PROJECT_DIR)/.terraform/plugins/selections.json ## Execute the "common" test harness from the
	@cd $(CURDIR)/tests/ && go mod download && go test -v -timeout 30m

plan: lint $(TERRAFORM_PROJECT_DIR)/.terraform/plugins/selections.json ## Write the planned changes into $(PLAN_FILE_NAME) (but do NOT apply them)
	@cd $(TERRAFORM_PROJECT_DIR) && terraform plan -compact-warnings -lock=false -out=tfplan > /dev/null
	@cd $(TERRAFORM_PROJECT_DIR) && terraform show -no-color tfplan > $(TERRAFORM_PROJECT_DIR)/$(PLAN_FILE_NAME)
	@echo "Terraform plan output can be checked under the file ./$(PLAN_FILE_NAME)"

deploy: lint $(TERRAFORM_PROJECT_DIR)/.terraform/plugins/selections.json ## Deploy (apply) the terraform changes to production
	@cd $(TERRAFORM_PROJECT_DIR) && terraform apply -auto-approve

clean: ## Remove any temporary artefacts generated by this Makefile
	@rm -rf $(TERRAFORM_PROJECT_DIR)/.terraform

.PHONY: clean validate prepare help tests common-tests plan deploy lint

$(TERRAFORM_PROJECT_DIR)/.terraform/plugins/selections.json:
	@cd $(TERRAFORM_PROJECT_DIR) && terraform init -backend-config=$(BACKEND_CONFIG_FILE)
